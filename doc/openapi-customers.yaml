openapi: 3.1.0

info:
  title: Customer API
  description: API for managing customers
  version: 1.0.0
  contact:
    name: Shop Management System

servers:
  - url: http://localhost:4000

tags:
  - name: customers
  - name: analytics

paths:
  /api/customers:
    get:
      tags: [customers]
      summary: Get all customers
      operationId: getAllCustomers
      responses:
        '200':
          description: Successfully retrieved customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllCustomers'
    post:
      tags: [customers]
      summary: Create new customer
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomer'
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

  /api/customers/{id}:
    get:
      tags: [customers]
      summary: Get customer by ID
      operationId: getCustomerById
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Retrieved customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    put:
      tags: [customers]
      summary: Update customer
      operationId: updateCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomer'
      responses:
        '200':
          description: Updated customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    delete:
      tags: [customers]
      summary: Delete customer
      operationId: deleteCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Deleted customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

  /api/customers/{id}/value:
    get:
      tags: [analytics]
      summary: Get customer values
      description: Sum of order prices grouped by customer
      operationId: getCustomerValues
      responses:
        '200':
          description: Customer values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerValues'

components:
  schemas:
    CreateCustomer:
      type: object
      required: [name, email]
      properties:
        name: { type: string, example: "Alice Smith" }
        email: { type: string, example: "alice@email.com" }

    Customer:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "Alice Smith" }
        email: { type: string, example: "alice@email.com" }

    AllCustomers:
      type: array
      items: { $ref: '#/components/schemas/Customer' }

    CustomerValues:
      type: array
      items:
        type: object
        properties:
          customer: { $ref: '#/components/schemas/Customer' }
          total_value: { type: number, format: float, example: 5000.50 }
