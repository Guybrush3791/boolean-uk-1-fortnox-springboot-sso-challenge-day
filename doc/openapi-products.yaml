openapi: 3.1.0

info:
  title: Product API
  description: API for managing products
  version: 1.0.0
  contact:
    name: Shop Management System

servers:
  - url: http://localhost:4000

tags:
  - name: products
  - name: analytics

paths:
  /api/public/products:
    get:
      tags: [products]
      summary: Get all products (public)
      operationId: getAllProductsPublic
      responses:
        '200':
          description: Retrieved products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllProducts'

  /api/public/products/{id}:
    get:
      tags: [products]
      summary: Get product by ID (public)
      operationId: getProductByIdPublic
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Retrieved product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

  /api/products:
    get:
      tags: [products]
      summary: Get all products (admin)
      operationId: getAllProductsAdmin
      responses:
        '200':
          description: Retrieved products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllProducts'
    post:
      tags: [products]
      summary: Create product
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProduct'
      responses:
        '201':
          description: Created product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /api/products/{id}:
    get:
      tags: [products]
      summary: Get product by ID (admin)
      operationId: getProductByIdAdmin
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Retrieved product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    put:
      tags: [products]
      summary: Update product
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProduct'
      responses:
        '200':
          description: Updated product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    delete:
      tags: [products]
      summary: Delete product
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Deleted product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

  /api/products/{id}/times-sold:
    get:
      tags: [analytics]
      summary: Get product sales
      description: Get each product with sales count
      operationId: getProductSales
      responses:
        '200':
          description: Product sales data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSales'

components:
  schemas:
    CreateProduct:
      type: object
      required: [name, price]
      properties:
        name: { type: string, example: "Laptop" }
        price: { type: number, format: float, example: 999.99 }

    Product:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "Laptop" }
        price: { type: number, format: float, example: 999.99 }

    AllProducts:
      type: array
      items: { $ref: '#/components/schemas/Product' }

    ProductSales:
      type: array
      items:
        type: object
        properties:
          product: { $ref: '#/components/schemas/Product' }
          sales_count: { type: integer, example: 120 }

    Error404:
      type: object
      properties:
        message: { type: string, example: "not found" }
